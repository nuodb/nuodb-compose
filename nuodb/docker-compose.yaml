version: '3'
services:
  nuoadmin1:
    image: $NUODB_IMAGE

    # Do NOT remove this env_file value!!
    env_file: .env

    environment:
      NUODB_DOMAIN_ENTRYPOINT: ${PEER_ADDRESS:-nuoadmin1}
    hostname: ${PEER_ADDRESS:-nuoadmin1}
    ports:
      - 48004-48005:48004-48005
      - 8888:8888
    command:
    - "nuoadmin"
    - "--"
    - "pendingProcessTimeout=${STARTUP_TIMEOUT:-60}000"
    - "pendingReconnectTimeout=90000"
    - "thrift.message.max=1073741824"
    - "processLivenessCheckSec=30"

  sm:
    image: $NUODB_IMAGE
    environment:
      # push the current resolved value of the VAR
      NUOCMD_API_SERVER: ${PEER_ADDRESS:-nuoadmin1}:8888
      ARCHIVE_DIR: ${ARCHIVE_PATH:-/var/opt/nuodb/archive}
      DB_OPTIONS: "mem ${ENGINE_MEM:-1Gi} execution-engine ${SQL_ENGINE:-vee} ${ENGINE_OPTIONS:-}"
    hostname: sm1
    depends_on:
      - nuoadmin1
    volumes:
      - ${IMPORT_LOCAL:-./empty-file}:${IMPORT_MOUNT:-/var/tmp/env}

    ## NOTE: use '$$' for any variable that is to be evaluated at runtime IN THE SHELL.
    # Any variable with a single '$' is resolved by docker-compose and written literally into the command string.
    command:
      - "sh"
      - "-c"
      - |
        msg=$$(nuocmd check servers --timeout ${STARTUP_TIMEOUT:-60} --check-converged --check-active)
        [ $$? -ne 0 ] && echo "SM timed out waiting for admin layer to be ready: $$msg" && exit 98
        echo "ARCHIVE_DIR=$$ARCHIVE_DIR"
        if [ -n '$IMPORT_LOCAL$IMPORT_REMOTE' -a ! -f "$$ARCHIVE_DIR/1.atm" ]; then
          echo "Importing into empty archive..."
          [[ -n '$IMPORT_REMOTE' && '$IMPORT_REMOTE' != ?*://?* ]] && echo "IMPORT_REMOTE is not a valid URL: $IMPORT_REMOTE - import aborted" && exit 98
          if [ -n '$IMPORT_REMOTE' -a ! -s '$IMPORT_MOUNT' ]; then
            [ -n '$IMPORT_AUTH' -a '$IMPORT_AUTH' != ':' ] && curlAuth='--user $IMPORT_AUTH'
            if [ -n '$IMPORT_LOCAL' ]; then
              if [ ! -d '$IMPORT_MOUNT']; then
                echo "Downloading $IMPORT_REMOTE into host:$IMPORT_LOCAL..."
                curl -k $${curlAuth:-} '$IMPORT_REMOTE' > '$IMPORT_MOUNT' || exit 98
              elif [ '$IMPORT_IS_BACKUP' = 'true' ]; then
                echo "Downloading BACKUPSET in $IMPORT_REMOTE into directory host:$IMPORT_LOCAL..."
                curl -k $${curlAuth:-} '$IMORT_REMOTE' | tar xzf - --strip-components ${IMPORT_LEVEL:-1} -C $$IMPORT_MOUNT || exit 98
              else
                echo "$IMPORT_REMOTE is not a BACKUPSET and host:$IMPORT_LOCAL is not a file - caching ignored."
                echo "Importing from $IMPORT_REMOTE into $$ARCHIVE_DIR..."
                curl -k $${curlAuth:-} '$IMPORT_REMOTE' | tar xzf - --strip-components ${IMPORT_LEVEL:-1} -C $$ARCHIVE_DIR || exit 98
              fi
            else
              echo "$IMPORT_LOCAL is not set - caching disabled."
              echo "Importing from $IMPORT_REMOTE into $$ARCHIVE_DIR..."
              curl -k $${curlAuth:-} '$IMPORT_REMOTE' | tar xzf - --strip-components ${IMPORT_LEVEL:-1} -C $$ARCHIVE_DIR || exit 98
            fi
          fi
          if [ -n '$IMPORT_LOCAL' -a -s '$IMPORT_MOUNT']; then
            [ -n '$IMPORT_REMOTE' ] && echo "Using host:$IMPORT_LOCAL - assuming it is a cached copy of $IMPORT_REMOTE..."
            if [ -d '$IMPORT_MOUNT' ]; then
              echo "Importing directory host:$IMPORT_LOCAL into $$ARCHIVE_DIR..."
              nuodocker restore archive --origin-dir $IMPORT_MOUNT --restore-dir $$ARCHIVE_DIR --db-name "$DB_NAME" --clean-metadata || exit 98
            else
              echo "Importing file host:$IMPORT_LOCAL into $$ARCHIVE_DIR..."
              tar xf '$IMPORT_MOUNT' --strip-components ${IMPORT_LEVEL:-1} -C "$$ARCHIVE_DIR" || exit 98
            fi
          elif [ -n '$IMPORT_LOCAL' ]; then
            echo "host:$IMPORT_LOCAL is not a valid, non-empty file or directory - import aborted..."
            exit 98
          fi
          [ $$(find "$$ARCHIVE_DIR" -name 1.atm | wc -l) -gt 0 ] && echo "Imported data looks good..." || echo "Imported archive does not seem to contain valid data: $$(ls $$ARCHIVE_DIR)"
          if [ !  -d '$IMPORT_MOUNT' ]; then
            nuodocker restore archive --origin-dir "$$ARCHIVE_DIR" --restore-dir "$$ARCHIVE_DIR" --db-name "$DB_NAME" --clean-metadata || exit 99
          fi
        fi
        nuodocker start sm --db-name '$DB_NAME' --server-id '${PEER_ADDRESS:-nuoadmin1}' --dba-user '$DB_USER' --dba-password '$DB_PASSWORD' --options 'alt-address sm1' --database-options "$$DB_OPTIONS"

  te1:
    image: $NUODB_IMAGE
    environment:
      # push the current resolved value of the VAR
      NUOCMD_API_SERVER: ${PEER_ADDRESS:-nuoadmin1}:8888
      STARTUP_TIMEOUT: ${STARTUP_TIMEOUT:-90}
    hostname: te1
    depends_on:
      - nuoadmin1
      - sm
    ports:
      - 48006:48006

    ## NOTE: use '$$' for any variable that is to be evaluated at runtime IN THE SHELL.
    # Any variable with a single '$' is resolved by docker-compose and written literally into the command string.
    command:
      - "sh"
      - "-c"
      - |
        sleepTime=0
        sleepQuantum=30
        while [ -z "$$(nuocmd get database --db-name $DB_NAME)" -o $$? -ne 0 ] ; do
          if [ $$sleepTime -ge $$STARTUP_TIMEOUT ]; then
            echo "Timed out waiting for database startup ($$sleepTime sec)..."
            exit 97
          fi
          echo "Waiting for confirmation that database $DB_NAME exists..."
          sleep $$sleepQuantum
          sleepTime=$$(( sleepTime + sleepQuantum ))
          [ $$sleepQuantum -lt $$((STARTUP_TIMEOUT / 2)) ] && sleepQuantum=$$(( sleepQuantum + 30 ))
        done
        nuodocker start te --db-name '$DB_NAME' --server-id '${PEER_ADDRESS:-nuoadmin1}' --options 'alt-address ${EXTERNAL_ADDRESS:-te1}'

  # te2:
  #   image: $NUODB_IMAGE
  #   environment:
  #     # push the current resolved value of the VAR
  #     NUOCMD_API_SERVER:
  #   hostname: te2
  #   scale: 0
  #   depends_on:
  #     - nuoadmin1
  #     - sm
  #   ports:
  #     - 48007:48006
  #   command: [ "nuodocker", "start", "te", "--db-name", "$DB_NAME", "--server-id", "${PEER_ADDRESS:-nuoadmin1}", "--options", "alt-address ${EXTERNAL_ADDRESS:-te2}" ]

  influxdb:
    image: influxdb:1.8
    # ports:
      # The API for InfluxDB is served on port 8086
      # - "8086:8086"
      # - "8082:8082"
    volumes:
      - ./conf/initdb.sh:/docker-entrypoint-initdb.d/initdb.sh

  nuocd-sm:
    image: nuodb/nuodb-collector:latest
    depends_on:
      - nuoadmin1
      - sm
      - influxdb
    environment:
      INFLUXURL: http://influxdb:8086
      NUOCD_HOSTNAME: sm1
    pid: 'service:sm'

  nuocd-te1:
    image: nuodb/nuodb-collector:latest
    depends_on:
      - nuoadmin1
      - te1
      - influxdb
    environment:
      INFLUXURL: http://influxdb:8086
      NUOCD_HOSTNAME: te1
    pid: 'service:te1'

  # nuocd-te2:
  #   image: nuodb/nuodb-collector:latest
  #   depends_on:
  #     - nuoadmin1
  #     - te2
  #     - influxdb
  #   environment:
  #     INFLUXURL: http://influxdb:8086
  #     NUOCMD_API_SERVER:
  #     NUOCD_HOSTNAME: te2
  #   pid: 'service:te2'
    
  grafana:
    image: grafana/grafana:7.5.4
    depends_on:
      - influxdb
    environment:
      INFLUX_HOST: influxdb
    volumes:
      - ./provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"

  # ycsb-demo:
  #   image: nuodb/ycsb:latest
  #   depends_on:
  #     - te1
  #   environment:
  #     PEER_ADDRESS: ${PEER_ADDRESS:-nuoadmin1}
  #     DB_NAME:
  #     DB_USER:
  #     DB_PASSWORD:
  #   command: ["/driver/startup.sh"]
